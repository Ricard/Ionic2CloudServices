import { UserContextDependencies, IUserContext, IUserData, UserDetails, StoredUser, UserDependencies, IUser, SingleUserServiceDependencies, SingleUserServiceOptions, ISingleUserService } from '../definitions';
export declare class UserContext implements IUserContext {
    private storage;
    private config;
    constructor(deps: UserContextDependencies);
    label: string;
    unstore(): void;
    store(user: IUser): void;
    load(user: IUser): IUser;
}
export declare class UserData implements IUserData {
    data: Object;
    constructor(data?: {});
    deserializerDataTypes(): void;
    get(key: string, defaultValue: any): any;
    set(key: string, value: any): void;
    unset(key: string): void;
}
export declare class User implements IUser {
    private service;
    id: string;
    fresh: boolean;
    details: UserDetails;
    data: IUserData;
    private _unset;
    constructor(deps: UserDependencies);
    isAnonymous(): boolean;
    get(key: string, defaultValue: any): any;
    set(key: string, value: any): any;
    unset(key: string): any;
    clear(): void;
    save(): Promise<void>;
    delete(): Promise<void>;
    load(id?: string): Promise<void>;
    store(): void;
    unstore(): void;
    serializeForAPI(): UserDetails;
    serializeForStorage(): StoredUser;
    toString(): string;
}
export declare class SingleUserService implements ISingleUserService {
    config: SingleUserServiceOptions;
    private client;
    private context;
    private user;
    constructor(deps: SingleUserServiceDependencies, config?: SingleUserServiceOptions);
    current(): IUser;
    store(): void;
    unstore(): void;
    load(id?: string): Promise<void>;
    delete(): Promise<void>;
    save(): Promise<void>;
}
