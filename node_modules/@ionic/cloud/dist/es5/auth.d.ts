import { IConfig, IClient, TokenContextDependencies, CombinedTokenContextDependencies, ITokenContext, ICombinedTokenContext, ICombinedTokenContextStoreOptions, AuthModuleId, LoginOptions, AuthDependencies, AuthOptions, IAuth, IUser, AuthTypeDependencies, IAuthType, UserDetails, BasicLoginCredentials, IBasicAuthType } from './definitions';
export declare class AuthTokenContext implements ITokenContext {
    label: string;
    private storage;
    constructor(deps: TokenContextDependencies, label: string);
    get(): string;
    store(token: string): void;
    delete(): void;
}
export declare class CombinedAuthTokenContext implements ICombinedTokenContext {
    label: string;
    private storage;
    private tempStorage;
    constructor(deps: CombinedTokenContextDependencies, label: string);
    get(): string;
    store(token: string, options?: ICombinedTokenContextStoreOptions): void;
    delete(): void;
}
export declare class Auth implements IAuth {
    options: AuthOptions;
    private emitter;
    private authModules;
    private tokenContext;
    private userService;
    private authToken;
    constructor(deps: AuthDependencies, options?: AuthOptions);
    isAuthenticated(): boolean;
    login(moduleId: AuthModuleId, data?: Object, options?: LoginOptions): Promise<IUser>;
    signup(data: UserDetails): Promise<void>;
    logout(): void;
    getToken(): string;
    storeToken(options: LoginOptions, token: string): void;
}
export declare abstract class AuthType implements IAuthType {
    config: IConfig;
    client: IClient;
    constructor(deps: AuthTypeDependencies);
    abstract authenticate(data?: Object): Promise<any>;
    protected inAppBrowserFlow(options: any, data?: Object): Promise<string>;
}
export declare class BasicAuth extends AuthType implements IBasicAuthType {
    authenticate(data: BasicLoginCredentials): Promise<string>;
    signup(data: UserDetails): Promise<void>;
}
export declare class CustomAuth extends AuthType {
    authenticate(data?: Object): Promise<any>;
}
export declare class TwitterAuth extends AuthType {
    authenticate(data?: Object): Promise<any>;
}
export declare class FacebookAuth extends AuthType {
    authenticate(data?: Object): Promise<any>;
}
export declare class GithubAuth extends AuthType {
    authenticate(data?: Object): Promise<any>;
}
export declare class GoogleAuth extends AuthType {
    authenticate(data?: Object): Promise<any>;
}
export declare class InstagramAuth extends AuthType {
    authenticate(data?: Object): Promise<any>;
}
export declare class LinkedInAuth extends AuthType {
    authenticate(data?: Object): Promise<any>;
}
