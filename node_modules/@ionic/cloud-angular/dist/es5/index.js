"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
__export(require('@ionic/cloud'));
var core_1 = require('@angular/core');
var cloud_2 = require('@ionic/cloud');
var cloud_3 = require('@ionic/cloud');
var Auth = (function (_super) {
    __extends(Auth, _super);
    function Auth() {
        _super.apply(this, arguments);
    }
    Auth = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], Auth);
    return Auth;
}(cloud_3.Auth));
exports.Auth = Auth;
var Client = (function (_super) {
    __extends(Client, _super);
    function Client() {
        _super.apply(this, arguments);
    }
    Client = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], Client);
    return Client;
}(cloud_3.Client));
exports.Client = Client;
var Config = (function (_super) {
    __extends(Config, _super);
    function Config() {
        _super.apply(this, arguments);
    }
    Config = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], Config);
    return Config;
}(cloud_3.Config));
exports.Config = Config;
var Cordova = (function (_super) {
    __extends(Cordova, _super);
    function Cordova() {
        _super.apply(this, arguments);
    }
    Cordova = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], Cordova);
    return Cordova;
}(cloud_3.Cordova));
exports.Cordova = Cordova;
var Core = (function (_super) {
    __extends(Core, _super);
    function Core() {
        _super.apply(this, arguments);
    }
    Core = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], Core);
    return Core;
}(cloud_3.Core));
exports.Core = Core;
var Deploy = (function (_super) {
    __extends(Deploy, _super);
    function Deploy() {
        _super.apply(this, arguments);
    }
    Deploy = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], Deploy);
    return Deploy;
}(cloud_3.Deploy));
exports.Deploy = Deploy;
var Device = (function (_super) {
    __extends(Device, _super);
    function Device() {
        _super.apply(this, arguments);
    }
    Device = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], Device);
    return Device;
}(cloud_3.Device));
exports.Device = Device;
var EventEmitter = (function (_super) {
    __extends(EventEmitter, _super);
    function EventEmitter() {
        _super.apply(this, arguments);
    }
    EventEmitter = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], EventEmitter);
    return EventEmitter;
}(cloud_3.EventEmitter));
exports.EventEmitter = EventEmitter;
var Insights = (function (_super) {
    __extends(Insights, _super);
    function Insights() {
        _super.apply(this, arguments);
    }
    Insights = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], Insights);
    return Insights;
}(cloud_3.Insights));
exports.Insights = Insights;
var Logger = (function (_super) {
    __extends(Logger, _super);
    function Logger() {
        _super.apply(this, arguments);
    }
    Logger = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], Logger);
    return Logger;
}(cloud_3.Logger));
exports.Logger = Logger;
var Push = (function (_super) {
    __extends(Push, _super);
    function Push() {
        _super.apply(this, arguments);
    }
    Push = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], Push);
    return Push;
}(cloud_3.Push));
exports.Push = Push;
var SingleUserService = (function (_super) {
    __extends(SingleUserService, _super);
    function SingleUserService() {
        _super.apply(this, arguments);
    }
    SingleUserService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], SingleUserService);
    return SingleUserService;
}(cloud_3.SingleUserService));
exports.SingleUserService = SingleUserService;
var Storage = (function (_super) {
    __extends(Storage, _super);
    function Storage() {
        _super.apply(this, arguments);
    }
    Storage = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], Storage);
    return Storage;
}(cloud_3.Storage));
exports.Storage = Storage;
var User = (function (_super) {
    __extends(User, _super);
    function User() {
        _super.apply(this, arguments);
    }
    User = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], User);
    return User;
}(cloud_3.User));
exports.User = User;
var UserContext = (function (_super) {
    __extends(UserContext, _super);
    function UserContext() {
        _super.apply(this, arguments);
    }
    UserContext = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], UserContext);
    return UserContext;
}(cloud_3.UserContext));
exports.UserContext = UserContext;
exports.container = new cloud_2.DIContainer();
function provideCloud(settings) {
    if (settings.logger) {
        var logger = exports.container.logger;
        logger.silent = settings.logger.silent;
    }
    var cordova = exports.container.cordova;
    cordova.bootstrap();
    var config = exports.container.config;
    config.register(settings.core);
    var core = exports.container.core;
    return [
        core_1.provide(Auth, { 'useFactory': function () { return exports.container.auth; } }),
        core_1.provide(Config, { 'useValue': config }),
        core_1.provide(Cordova, { 'useValue': cordova }),
        core_1.provide(Core, { 'useValue': core }),
        core_1.provide(Client, { 'useFactory': function () { return exports.container.client; } }),
        core_1.provide(Deploy, { 'useFactory': function () { return exports.container.deploy; } }),
        core_1.provide(Device, { 'useFactory': function () { return exports.container.device; } }),
        core_1.provide(EventEmitter, { 'useFactory': function () { return exports.container.eventEmitter; } }),
        core_1.provide(SingleUserService, { 'useFactory': function () { return exports.container.singleUserService; } }),
        core_1.provide(Logger, { 'useFactory': function () { return exports.container.logger; } }),
        core_1.provide(Push, { 'useFactory': function () { return exports.container.push; } }),
        core_1.provide(User, { 'useFactory': function (singleUserService) { return singleUserService.current(); }, 'deps': [SingleUserService] }),
        core_1.provide(Storage, { 'useFactory': function () { return exports.container.storage; } }),
        core_1.provide(UserContext, { 'useFactory': function () { return exports.container.userContext; } })
    ];
}
exports.provideCloud = provideCloud;
